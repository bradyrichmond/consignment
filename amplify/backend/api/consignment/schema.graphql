# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum ClientType {
  CLIENT
  RETAIL_VENDOR
  STORE_ACCOUNT
}

type Client @model {
  id: ID!
  clientId: String
  clientType: ClientType
  firstName: String!
  lastName: String!
  companyName: String
  account: String!
  receiveMailInd: Boolean!
  nextItemNumber: String!
  phone: String
  email: String
  createTimestamp: AWSDate
  activeTimestamp: AWSDate
  inactiveTimestamp: AWSDate
  modifiedBy: String!
  items: [Item] @hasMany
  addresses: [Address] @hasMany
}

type Item @model {
  id: ID!
  itemId: String!
  userId: String!
  itemAcquireTypeId: String!
  categoryId: String!
  locationId: String!
  sectionId: String!
  statusId: String!
  taxTypeId: String!
  number: String!
  itemName: String!
  description: String!
  receiveTimestamp: String!
  donateIndicator: Boolean
  price: String!
  cost: String
  qty: Int
  qtyTagPrint: Int
  tagPrintedTimestamp: String!
  commission: String!
  itemAcquisitionTypeId: String!
  brandId: String!
  saleDetailId: String!
  titleChanged: Boolean
  modifiedTimestamp: String!
  modifiedBy: String!
  upcCode: String!
  createTimestamp: String!
  entryTimestamp: String
}

type Transaction @model {
  id: ID!
  clientTransId: String!
  client: Client
  itemId: String!
  payoutId: String
  transCdId: String
  userId: String!
  actTransTimestamp: String
  actTransDesc: String
  actTransAmt: String
  hold: Boolean
  glExportInd: Boolean
  syncInd: Boolean
  saleDetailId: String
  location: Location @hasOne
}

type Location @model {
  id: ID!
  locationName: String!
  address: Address @hasOne
}

type Address @model {
  id: ID!
  addressId: String
  addressLabel: String
  label: String
  address1: String
  address2: String
  address3: String
  city: String
  state: String
  zip: String
  primary: Boolean
}

type City @model {
  cityId: String!
  zip: String!
  city: String!
  state: String!
}

type PriceGuide @model {
  id: ID!
  categoryPriceGuideId: String!
  category: Category! @hasOne
  price: String!
  priceLevel: String!
}

type Brand @model {
  id: ID!
  brandId: String
  description: String!
  lastUpdateTimestamp: AWSDate!
  inactive: Boolean
}

type Category @model {
  id: ID!
  parent: String
  categoryId: String
  categoryName: String!
  categoryLevel: Int!
  inactive: Boolean
  lastUpdateTimestamp: AWSDate!
}

type CategoryAttribute @model {
  id: ID!
  categoryAttributeId: String
  category: Category @hasOne
  attributeType: AttributeType! @hasOne
  required: Boolean!
  categoryAttributeName: String!
  userDefinedIndicator: String
  active: Boolean
  priority: String
  lastUpdateTimestamp: AWSDate!
  titleIndicator: Boolean!
  inactive: Boolean
}

type AttributeType @model {
  id: ID!
  attributeTypeId: String
  attributeTypeDescription: String!
  lastUpdateTimestamp: AWSDate!
  inactive: Boolean
}

type AttributeTypeValue @model {
  id: ID!
  attributeTypeValueId: String!
  attributeTypeValue: String!
  lastUpdateTimestamp: AWSDate!
  inactive: Boolean
}

type CategoryPriceGuide @model {
  id: ID!
  category: Category @hasOne
  description: String!
  price: Float
  priceLevel: Int
  sortOrder: Int
  inactive: Boolean
}
